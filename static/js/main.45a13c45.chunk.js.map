{"version":3,"sources":["Components/currency/Currency.js","App.js","reportWebVitals.ts","index.js"],"names":["Currency","currencyName","selectedCurrency","onChangeCurrency","sum","onChangeSum","className","type","value","onChange","map","name","BASE_URL","App","toSum","fromSum","useState","setCurrencyName","fromCurrency","setFromCurrency","toCurrency","setToCurrency","exchangeRate","setExchangeRate","setSum","sumInFromCurrency","setSumInFromCurrency","console","log","useEffect","fetch","then","res","json","data","firstCurrency","Object","keys","rates","base","response","e","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAGe,SAASA,EAAT,GAAsF,IAAlEC,EAAiE,EAAjEA,aAAaC,EAAoD,EAApDA,iBAAiBC,EAAmC,EAAnCA,iBAAiBC,EAAkB,EAAlBA,IAAIC,EAAc,EAAdA,YAClF,OACI,sBAAKC,UAAU,WAAf,UACI,uBAAOA,UAAU,QAAQC,KAAK,SAASC,MAAOJ,EAAKK,SAAUJ,IAC7D,wBAAQG,MAAON,EAAkBO,SAAUN,EAA3C,SACKF,EAAaS,KAAI,SAAAC,GAAI,OAClB,wBAAmBH,MAAOG,EAA1B,SAAiCA,GAApBA,W,UCJ3BC,EAAW,yCAsGFC,MApGf,WAAgB,IAoBRC,EAAOC,EApBA,EAE6BC,mBAAS,IAFtC,mBAEJf,EAFI,KAEUgB,EAFV,OAG6BD,mBAAS,IAHtC,mBAGJE,EAHI,KAGUC,EAHV,OAIyBH,mBAAS,IAJlC,mBAIJI,EAJI,KAIQC,EAJR,OAK6BL,mBAAS,IALtC,mBAKJM,EALI,KAKUC,EALV,OAMWP,mBAAS,GANpB,mBAMJZ,EANI,KAMCoB,EAND,OAOuCR,oBAAS,GAPhD,mBAOJS,EAPI,KAOeC,EAPf,KA4EX,OA1DAC,QAAQC,IAAIH,GAGRA,GACAV,EAAUX,EACVU,EAAQV,EAAMkB,IAEdR,EAAQV,EACRW,EAAUX,EAAMkB,GAGpBO,qBAAU,WACNC,MAAMlB,GACDmB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACF,IAAMC,EAAgBC,OAAOC,KAAKH,EAAKI,OAAO,GAC9CrB,EAAgB,CAACiB,EAAKK,MAAP,mBAAgBH,OAAOC,KAAKH,EAAKI,UAChDnB,EAAgBe,EAAKK,MACrBlB,EAAcc,GACdZ,EAAgBW,EAAKI,MAAMH,SAGpC,IAEHN,qBAAU,WACc,MAAhBX,GAAsC,MAAdE,GACxBU,MAAM,GAAD,OAAIlB,EAAJ,iBAAqBM,EAArB,oBAA6CE,IAC7CW,MAAK,SAAAS,GAAQ,OAAIA,EAASP,UAC1BF,MAAK,SAAAG,GAAI,OAAIX,EAAgBW,EAAKI,MAAMlB,SAIlD,CAACF,EAAcE,IA2Bd,sBAAKd,UAAU,MAAf,UACI,oDACA,sBAAKA,UAAU,UAAf,UACI,cAACN,EAAD,CAAUC,aAAcA,EACdC,iBAAkBgB,EAClBf,iBAlBtB,SAAoBsC,GAEhBf,GAAqB,GACrBP,EAAgBsB,EAAEC,OAAOlC,QAgBPJ,IAAKW,EACLV,YAhCtB,SAA6BoC,GAEzBjB,EAAOiB,EAAEC,OAAOlC,OAChBkB,GAAqB,MA+Bb,sBAAMpB,UAAU,QAAhB,eAGA,cAACN,EAAD,CAAUC,aAAcA,EACdC,iBAAkBkB,EAClBjB,iBArBtB,SAAoBsC,GAEhBf,GAAqB,GACrBL,EAAcoB,EAAEC,OAAOlC,QAmBLJ,IAAKU,EACLT,YAnCtB,SAA2BoC,GAEvBjB,EAAOiB,EAAEC,OAAOlC,OAChBkB,GAAqB,aCtDdiB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.45a13c45.chunk.js","sourcesContent":["import React from 'react'\r\nimport './currency.scss';\r\n\r\nexport default function Currency ({currencyName,selectedCurrency,onChangeCurrency,sum,onChangeSum}) {\r\n    return (\r\n        <div className=\"currency\">\r\n            <input className=\"input\" type=\"number\" value={sum} onChange={onChangeSum}/>\r\n            <select value={selectedCurrency} onChange={onChangeCurrency}>\r\n                {currencyName.map(name => (\r\n                    <option key={name} value={name}>{name}</option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.scss';\nimport Currency from \"./Components/currency/Currency\";\nimport axios from \"axios\";\n\nconst BASE_URL = 'https://www.cbr-xml-daily.ru/latest.js'\n\nfunction App() {\n\n    const [currencyName, setCurrencyName] = useState([])\n    const [fromCurrency, setFromCurrency] = useState([])\n    const [toCurrency, setToCurrency] = useState([])\n    const [exchangeRate, setExchangeRate] = useState([])\n    const [sum, setSum] = useState(1)\n    const [sumInFromCurrency, setSumInFromCurrency] = useState(true)\n\n\n    // let toSum = sum\n    // let fromSum = sum\n    //\n    // if (sumInFromCurrency) {\n    //     toSum = sum / exchangeRate\n    // } else {\n    //     fromSum = sum * exchangeRate\n    // }\n    console.log(sumInFromCurrency)\n\n    let toSum, fromSum\n    if (sumInFromCurrency) {\n        fromSum = sum\n        toSum = sum * exchangeRate\n    } else {\n        toSum = sum\n        fromSum = sum / exchangeRate\n    }\n\n    useEffect(() => {\n        fetch(BASE_URL)\n            .then(res => res.json())\n            .then(data => {\n                const firstCurrency = Object.keys(data.rates)[0]\n                setCurrencyName([data.base, ...Object.keys(data.rates)])\n                setFromCurrency(data.base)\n                setToCurrency(firstCurrency)\n                setExchangeRate(data.rates[firstCurrency])\n                // console.log(response.data)\n            })\n    }, []);\n\n    useEffect(() => {\n        if (fromCurrency != null && toCurrency != null) {\n            fetch(`${BASE_URL}?base=${fromCurrency}&symbols=${toCurrency}`)\n                .then(response => response.json())\n                .then(data => setExchangeRate(data.rates[toCurrency]))\n                    //\n                    // console.log(response.data.rates[toCurrency])\n        }\n    }, [fromCurrency, toCurrency])\n\n    function handleFromSumChange(e) {\n        debugger\n        setSum(e.target.value)\n        setSumInFromCurrency(true)\n    }\n\n    function handleToSumChange(e) {\n        debugger\n        setSum(e.target.value)\n        setSumInFromCurrency(false)\n    }\n\n    function callback1 (e) {\n        debugger\n        setSumInFromCurrency(false)\n        setFromCurrency(e.target.value)\n    }\n\n    function callback2 (e) {\n        debugger\n        setSumInFromCurrency(true)\n        setToCurrency(e.target.value)\n    }\n\n    return (\n        <div className=\"App\">\n            <h1>Currency Converter</h1>\n            <div className=\"content\">\n                <Currency currencyName={currencyName}\n                          selectedCurrency={fromCurrency}\n                          onChangeCurrency={callback1}\n                          sum={fromSum}\n                          onChangeSum={handleFromSumChange}\n                />\n                <span className=\"equal\">\n                    =\n                </span>\n                <Currency currencyName={currencyName}\n                          selectedCurrency={toCurrency}\n                          onChangeCurrency={callback2}\n                          sum={toSum}\n                          onChangeSum={handleToSumChange}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}